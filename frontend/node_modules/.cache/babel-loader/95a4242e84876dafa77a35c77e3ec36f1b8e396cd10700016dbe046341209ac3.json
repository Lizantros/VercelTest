{"ast":null,"code":"function Validation(values){// Create an empty object to store error messages\nvar error={};// Define regular expressions for email and password patterns\nvar email_pattern=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;var password_pattern=/^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{7,15}$/;// Check if the email field is empty\nif(values.email===\"\"){error.email=\"Le champ ne doit pas être vide\";}// Check if the email format is valid using the email pattern regular expression\nelse if(!email_pattern.test(values.email)){error.email=\"Le mail ne correspond pas\";}else{// If the email is valid, set the error message to an empty string\nerror.email=\"\";}// Check if the password field is empty\nif(values.password===\"\"){error.password=\"Le champ du mot de passe ne doit pas être vide\";}// Check if the password format is valid using the password pattern regular expression\nelse if(!password_pattern.test(values.password)){error.password=\"le mot de passe ne correspond pas\";}else{// If the password is valid, set the error message to an empty string\nerror.password=\"\";}// Return the error object containing any error messages\nreturn error;}// Export the Validation function as the default export of the module\nexport default Validation;","map":{"version":3,"names":["Validation","values","error","email_pattern","password_pattern","email","test","password"],"sources":["/Users/loicpeyramaure/Gw2 Talk/Gw2-Talk/frontend/src/LoginValidation.js"],"sourcesContent":["function Validation(values){\n    \n    // Create an empty object to store error messages\n    let error = {\n    }\n\n    // Define regular expressions for email and password patterns\n    const email_pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    const password_pattern =  /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{7,15}$/\n\n    // Check if the email field is empty\n    if(values.email === \"\") {\n        error.email = \"Le champ ne doit pas être vide\"\n    }\n    // Check if the email format is valid using the email pattern regular expression\n    else if(!email_pattern.test(values.email)){\n        error.email =\"Le mail ne correspond pas\"\n    }\n    else{\n        // If the email is valid, set the error message to an empty string\n        error.email= \"\"\n    }\n\n    // Check if the password field is empty\n    if(values.password === \"\"){\n        error.password= \"Le champ du mot de passe ne doit pas être vide\"\n    }\n    // Check if the password format is valid using the password pattern regular expression\n    else if(!password_pattern.test(values.password)){\n        error.password = \"le mot de passe ne correspond pas\"\n    } \n    else {\n        // If the password is valid, set the error message to an empty string\n        error.password = \"\"\n    }\n\n    // Return the error object containing any error messages\n    return error;\n}\n\n// Export the Validation function as the default export of the module\nexport default Validation;"],"mappings":"AAAA,QAAS,CAAAA,UAAUA,CAACC,MAAM,CAAC,CAEvB;AACA,GAAI,CAAAC,KAAK,CAAG,CACZ,CAAC,CAED;AACA,GAAM,CAAAC,aAAa,CAAG,4BAA4B,CAClD,GAAM,CAAAC,gBAAgB,CAAI,wDAAwD,CAElF;AACA,GAAGH,MAAM,CAACI,KAAK,GAAK,EAAE,CAAE,CACpBH,KAAK,CAACG,KAAK,CAAG,gCAAgC,CAClD,CACA;AAAA,IACK,IAAG,CAACF,aAAa,CAACG,IAAI,CAACL,MAAM,CAACI,KAAK,CAAC,CAAC,CACtCH,KAAK,CAACG,KAAK,CAAE,2BAA2B,CAC5C,CAAC,IACG,CACA;AACAH,KAAK,CAACG,KAAK,CAAE,EAAE,CACnB,CAEA;AACA,GAAGJ,MAAM,CAACM,QAAQ,GAAK,EAAE,CAAC,CACtBL,KAAK,CAACK,QAAQ,CAAE,gDAAgD,CACpE,CACA;AAAA,IACK,IAAG,CAACH,gBAAgB,CAACE,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,CAC5CL,KAAK,CAACK,QAAQ,CAAG,mCAAmC,CACxD,CAAC,IACI,CACD;AACAL,KAAK,CAACK,QAAQ,CAAG,EAAE,CACvB,CAEA;AACA,MAAO,CAAAL,KAAK,CAChB,CAEA;AACA,cAAe,CAAAF,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}