{"ast":null,"code":"var _jsxFileName = \"/Users/loicpeyramaure/Gw2 Talk/Gw2-Talk/frontend/src/Forum.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Forum = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [responseContent, setResponseContent] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  // Fetch posts when component mounts\n  useEffect(() => {\n    axios.get(\"/get-posts\").then(response => {\n      setPosts(response.data);\n    }).catch(error => {\n      console.error(\"Error fetching posts\", error);\n    });\n  }, []);\n\n  // Function to submit a new post\n  const submitPost = () => {\n    // Simple front-end validation\n    if (!title || !content) {\n      setError(\"Title and content are required.\");\n      return;\n    }\n    const token = localStorage.getItem(\"token\"); // Assuming the token is stored in localStorage\n    axios.post(\"/create-post\", {\n      title,\n      content\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(response => {\n      // Clear the form\n      setTitle(\"\");\n      setContent(\"\");\n      setError(\"\");\n\n      // Add the new post to the local state to update the list\n      setPosts([...posts, response.data]);\n    }).catch(error => {\n      console.error(\"Error creating post\", error);\n      // Check if error response is available and set error message\n      setError(error.response ? error.response.data.error : \"Error creating post.\");\n    });\n  };\n\n  // Function to submit a response to a post\n  const submitResponse = postId => {\n    if (!responseContent) {\n      setError(\"Response content is required.\");\n      return;\n    }\n    const token = localStorage.getItem(\"token\"); // Assuming the token is stored in localStorage\n    axios.post(`/respond-post/${postId}`, {\n      content: responseContent\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(response => {\n      // Clear the form\n      setResponseContent(\"\");\n      setError(\"\");\n\n      // Ideally, you'd also update the local state to include the new response\n      // This would require a more complex state structure, which is beyond the scope of this example\n    }).catch(error => {\n      console.error(\"Error creating response\", error);\n      // Check if error response is available and set error message\n      setError(error.response ? error.response.data.error : \"Error creating response.\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        placeholder: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: content,\n        onChange: e => setContent(e.target.value),\n        placeholder: \"Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitPost,\n        children: \"Submit Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Posted by: \", post.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: responseContent,\n          onChange: e => setResponseContent(e.target.value),\n          placeholder: \"Write a response...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => submitResponse(post.id),\n          children: \"Submit Response\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(Forum, \"q8dyawfNDxV8YMbl3sGtrAEi7fg=\");\n_c = Forum;\nexport default Forum;\nvar _c;\n$RefreshReg$(_c, \"Forum\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Forum","_s","posts","setPosts","title","setTitle","content","setContent","responseContent","setResponseContent","error","setError","get","then","response","data","catch","console","submitPost","token","localStorage","getItem","post","headers","Authorization","submitResponse","postId","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","map","author","id","_c","$RefreshReg$"],"sources":["/Users/loicpeyramaure/Gw2 Talk/Gw2-Talk/frontend/src/Forum.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst Forum = () => {\n  const [posts, setPosts] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [responseContent, setResponseContent] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  // Fetch posts when component mounts\n  useEffect(() => {\n    axios\n      .get(\"/get-posts\")\n      .then((response) => {\n        setPosts(response.data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching posts\", error);\n      });\n  }, []);\n\n  // Function to submit a new post\n  const submitPost = () => {\n    // Simple front-end validation\n    if (!title || !content) {\n      setError(\"Title and content are required.\");\n      return;\n    }\n\n    const token = localStorage.getItem(\"token\"); // Assuming the token is stored in localStorage\n    axios\n      .post(\n        \"/create-post\",\n        { title, content },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      )\n      .then((response) => {\n        // Clear the form\n        setTitle(\"\");\n        setContent(\"\");\n        setError(\"\");\n\n        // Add the new post to the local state to update the list\n        setPosts([...posts, response.data]);\n      })\n      .catch((error) => {\n        console.error(\"Error creating post\", error);\n        // Check if error response is available and set error message\n        setError(\n          error.response ? error.response.data.error : \"Error creating post.\"\n        );\n      });\n  };\n\n  // Function to submit a response to a post\n  const submitResponse = (postId) => {\n    if (!responseContent) {\n      setError(\"Response content is required.\");\n      return;\n    }\n\n    const token = localStorage.getItem(\"token\"); // Assuming the token is stored in localStorage\n    axios\n      .post(\n        `/respond-post/${postId}`,\n        { content: responseContent },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      )\n      .then((response) => {\n        // Clear the form\n        setResponseContent(\"\");\n        setError(\"\");\n\n        // Ideally, you'd also update the local state to include the new response\n        // This would require a more complex state structure, which is beyond the scope of this example\n      })\n      .catch((error) => {\n        console.error(\"Error creating response\", error);\n        // Check if error response is available and set error message\n        setError(\n          error.response ? error.response.data.error : \"Error creating response.\"\n        );\n      });\n  };\n\n  return (\n    <div>\n      {error && <p className=\"error\">{error}</p>}\n      <div>\n        <input\n          type=\"text\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          placeholder=\"Title\"\n        />\n        <textarea\n          value={content}\n          onChange={(e) => setContent(e.target.value)}\n          placeholder=\"Content\"\n        />\n        <button onClick={submitPost}>Submit Post</button>\n      </div>\n      <div>\n        {posts.map((post) => (\n          <div key={post.id}>\n            <h3>{post.title}</h3>\n            <p>{post.content}</p>\n            <p>Posted by: {post.author}</p>\n            <textarea\n              value={responseContent}\n              onChange={(e) => setResponseContent(e.target.value)}\n              placeholder=\"Write a response...\"\n            />\n            <button onClick={() => submitResponse(post.id)}>Submit Response</button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Forum;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}