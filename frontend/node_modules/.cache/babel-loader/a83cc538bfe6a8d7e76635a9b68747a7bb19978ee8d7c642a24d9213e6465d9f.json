{"ast":null,"code":"var _jsxFileName = \"/Users/loicpeyramaure/Gw2 Talk/Gw2-Talk/frontend/src/Account.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Account() {\n  _s();\n  const [userInfo, setUserInfo] = useState({});\n  const [gw2ApiKey, setGw2ApiKey] = useState(\"\");\n  const [gw2AccountInfo, setGw2AccountInfo] = useState(null);\n  useEffect(() => {\n    const fetchUserInfo = async () => {\n      const token = localStorage.getItem(\"token\");\n      try {\n        const response = await axios.get(\"http://localhost:5500/user-info\", {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log(\"Response:\", response);\n        setUserInfo(response.data);\n      } catch (error) {\n        console.error(\"Error fetching user info:\", error);\n      }\n    };\n    fetchUserInfo();\n  }, []);\n  const handleGw2ApiKeyChange = e => {\n    setGw2ApiKey(e.target.value);\n  };\n  const fetchGw2AccountInfo = async () => {\n    try {\n      const url = `https://api.guildwars2.com/v2/account?access_token=${encodeURIComponent(gw2ApiKey)}`;\n      const response = await axios.get(url);\n      setGw2AccountInfo(response.data);\n\n      // Check if GW2 account name is already stored in the database\n      // If not, update it\n      if (!userInfo.gw2AccountName) {\n        await updateGw2AccountName(response.data.name);\n      }\n    } catch (error) {\n      console.error(\"Error fetching GW2 account info:\", error);\n    }\n  };\n\n  // Function to update GW2 account name in your database\n  const updateGw2AccountName = async gw2AccountName => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      await axios.post(\"http://localhost:5500/update-gw2-account-name\", {\n        gw2AccountName\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(\"GW2 account name updated successfully\");\n      // Optionally update the local state to reflect the saved GW2 account name\n    } catch (error) {\n      console.error(\"Error updating GW2 account name:\", error);\n    }\n  };\n  const [image, setImage] = useState(null);\n  const handleImageChange = e => {\n    if (e.target.files && e.target.files[0]) {\n      setImage(e.target.files[0]);\n    }\n  };\n  const handleSubmitImage = async () => {\n    const formData = new FormData();\n    formData.append(\"image\", image);\n    try {\n      const token = localStorage.getItem(\"token\");\n      await axios.post(\"http://localhost:5500/upload-image\", formData, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      console.log(\"Image uploaded successfully\");\n    } catch (error) {\n      console.error(\"Error uploading image:\", error);\n    }\n  };\n  require(\"dotenv\").config();\n  const multer = require(\"multer\");\n  const express = require(\"express\");\n  const mysql = require(\"mysql\");\n  const cors = require(\"cors\");\n  const bcrypt = require(\"bcrypt\");\n  const app = express();\n\n  // Middleware setup\n  app.use(cors());\n  app.use(express.json());\n\n  // Database connection\n  const db = mysql.createConnection({\n    host: \"localhost\",\n    user: \"root\",\n    password: \"root\",\n    database: \"lpeyramaure\"\n  });\n  db.connect(err => {\n    if (err) {\n      console.error(\"Database connection error:\", err.stack);\n    } else {\n      console.log(\"Connected to the database.\");\n      // Initial DB query test\n      db.query(\"SELECT 1\", (err, results) => {\n        if (err) console.error(\"Initial DB query failed:\", err);else console.log(\"Initial DB query succeeded:\", results);\n      });\n    }\n  });\n\n  // bcrypt test\n  async function testBcrypt() {\n    try {\n      const hash = await bcrypt.hash(\"test\", 10);\n      console.log(\"Hashed string:\", hash);\n    } catch (err) {\n      console.error(\"bcrypt error:\", err);\n    }\n  }\n  testBcrypt();\n\n  // Signup route\n  app.post(\"/signup\", async (req, res) => {\n    // Validate request data\n    if (!req.body.name || !req.body.email || !req.body.password) {\n      return res.status(400).json({\n        error: \"Missing required fields\"\n      });\n    }\n    try {\n      // Hash the password\n      const hashedPassword = await bcrypt.hash(req.body.password, 10);\n      const sql = \"INSERT INTO login (name, email, password) VALUES (?)\";\n      const values = [req.body.name, req.body.email, hashedPassword];\n      db.query(sql, [values], (err, data) => {\n        if (err) {\n          console.error(\"Database query error:\", err);\n          return res.status(500).json({\n            error: err.message\n          });\n        }\n        return res.status(201).json({\n          message: \"User created\"\n        });\n      });\n    } catch (err) {\n      console.error(\"Error caught in /signup route:\", err);\n      return res.status(500).json({\n        error: err.message\n      });\n    }\n  });\n  const jwt = require(\"jsonwebtoken\");\n  app.post(\"/login\", async (req, res) => {\n    const {\n      email,\n      password\n    } = req.body;\n\n    // Fetch user from the database\n    const sql = \"SELECT * FROM login WHERE email = ?\";\n    db.query(sql, [email], async (err, results) => {\n      if (err) {\n        console.error(\"Database query error:\", err);\n        return res.status(500).json({\n          error: err.message\n        });\n      }\n      if (results.length > 0) {\n        const user = results[0];\n        // Compare hashed password\n        if (await bcrypt.compare(password, user.password)) {\n          // Generate token\n          const token = jwt.sign({\n            userId: user.id\n          }, process.env.JWT_SECRET, {\n            expiresIn: \"1h\"\n          });\n          return res.json({\n            token,\n            name: user.name\n          });\n        } else {\n          return res.status(401).json({\n            error: \"Invalid credentials\"\n          });\n        }\n      } else {\n        return res.status(401).json({\n          error: \"Invalid credentials\"\n        });\n      }\n    });\n  });\n  function authenticateToken(req, res, next) {\n    const authHeader = req.headers[\"authorization\"];\n    const token = authHeader && authHeader.split(\" \")[1];\n    if (token == null) return res.sendStatus(401);\n    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\n      if (err) return res.sendStatus(403);\n      req.user = user;\n      next();\n    });\n  }\n  app.get(\"/user-info\", authenticateToken, (req, res) => {\n    const userId = req.user.userId;\n    const sql = \"SELECT name, email, gw2_account_name, compteImage FROM login WHERE id = ?\";\n    db.query(sql, [userId], (err, results) => {\n      if (err) {\n        console.error(\"Database query error:\", err);\n        return res.status(500).json({\n          error: err.message\n        });\n      }\n      if (results.length > 0) {\n        const userInfo = results[0];\n        return res.json({\n          name: userInfo.name,\n          email: userInfo.email,\n          gw2AccountName: userInfo.gw2_account_name,\n          // Assuming you have this column in your DB\n          compteImage: userInfo.compteImage\n        });\n      } else {\n        return res.status(404).json({\n          error: \"User not found\"\n        });\n      }\n    });\n  });\n\n  // Endpoint to update GW2 account name\n  app.post(\"/update-gw2-account-name\", authenticateToken, (req, res) => {\n    const userId = req.user.userId;\n    const {\n      gw2AccountName\n    } = req.body;\n    if (!gw2AccountName) {\n      return res.status(400).json({\n        error: \"GW2 account name is required\"\n      });\n    }\n    const sql = \"UPDATE login SET gw2_account_name = ? WHERE id = ?\";\n    db.query(sql, [gw2AccountName, userId], (err, results) => {\n      if (err) {\n        console.error(\"Database query error:\", err);\n        return res.status(500).json({\n          error: \"Failed to update GW2 account name\"\n        });\n      }\n      if (results.affectedRows === 0) {\n        return res.status(404).json({\n          error: \"User not found\"\n        });\n      }\n      return res.json({\n        message: \"GW2 account name updated successfully\"\n      });\n    });\n  });\n  const storage = multer.memoryStorage();\n  const upload = multer({\n    storage: storage\n  });\n\n  // Endpoint pour télécharger une image de compte\n  app.post(\"/upload-image\", authenticateToken, upload.single(\"image\"), (req, res) => {\n    // Utilisation de 'userId' pour la cohérence avec l'endpoint '/user-info'\n    const userId = req.user.userId;\n    const imageBuffer = req.file.buffer; // Données binaires de l'image\n\n    // Mettre à jour la base de données avec les données binaires de l'image\n    const sql = \"UPDATE login SET compteImage = ? WHERE id = ?\";\n    db.query(sql, [imageBuffer, userId], (err, results) => {\n      if (err) {\n        console.error(\"Database query error:\", err);\n        return res.status(500).json({\n          error: \"Failed to update image data\"\n        });\n      }\n      return res.json({\n        message: \"Image uploaded and data updated successfully\"\n      });\n    });\n  });\n  const [userImage, setUserImage] = useState(\"\");\n  useEffect(() => {\n    const fetchUserImage = async () => {\n      if (userInfo && userInfo.compteImage) {\n        try {\n          const base64Image = `data:image/jpeg;base64,${userInfo.compteImage}`;\n          console.log(\"Base64 Image:\", base64Image);\n          setUserImage(base64Image);\n        } catch (error) {\n          console.error(\"Error fetching image:\", error);\n        }\n      }\n    };\n    fetchUserImage();\n  }, [userInfo]);\n\n  // Start the server\n  app.listen(5500, () => {\n    console.log(\"Server is running on http://localhost:5500\");\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Page de compte\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [userInfo.name, \" \", userInfo.gw2AccountName || gw2AccountInfo && `/ ${gw2AccountInfo.name}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your GW2 API Key\",\n        value: gw2ApiKey,\n        onChange: handleGw2ApiKeyChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchGw2AccountInfo,\n        children: \"Obtenir mon nom de compte joueur\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), image && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: URL.createObjectURL(image),\n        alt: \"Account\",\n        style: {\n          borderRadius: \"50%\",\n          height: \"100px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitImage,\n        children: \"Upload Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: userImage && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: userImage,\n        alt: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 26\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 5\n  }, this);\n}\n_s(Account, \"q4Cc911AIfdX9EW/HhMZQDpGHgI=\");\n_c = Account;\nexport default Account;\nvar _c;\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Account","_s","userInfo","setUserInfo","gw2ApiKey","setGw2ApiKey","gw2AccountInfo","setGw2AccountInfo","fetchUserInfo","token","localStorage","getItem","response","get","headers","Authorization","console","log","data","error","handleGw2ApiKeyChange","e","target","value","fetchGw2AccountInfo","url","encodeURIComponent","gw2AccountName","updateGw2AccountName","name","post","image","setImage","handleImageChange","files","handleSubmitImage","formData","FormData","append","require","config","multer","express","mysql","cors","bcrypt","app","use","json","db","createConnection","host","user","password","database","connect","err","stack","query","results","testBcrypt","hash","req","res","body","email","status","hashedPassword","sql","values","message","jwt","length","compare","sign","userId","id","process","env","JWT_SECRET","expiresIn","authenticateToken","next","authHeader","split","sendStatus","verify","gw2_account_name","compteImage","affectedRows","storage","memoryStorage","upload","single","imageBuffer","file","buffer","userImage","setUserImage","fetchUserImage","base64Image","listen","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","src","URL","createObjectURL","alt","style","borderRadius","height","_c","$RefreshReg$"],"sources":["/Users/loicpeyramaure/Gw2 Talk/Gw2-Talk/frontend/src/Account.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Account() {\n  const [userInfo, setUserInfo] = useState({});\n  const [gw2ApiKey, setGw2ApiKey] = useState(\"\");\n  const [gw2AccountInfo, setGw2AccountInfo] = useState(null);\n\n  useEffect(() => {\n    const fetchUserInfo = async () => {\n      const token = localStorage.getItem(\"token\");\n      try {\n        const response = await axios.get(\"http://localhost:5500/user-info\", {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        console.log(\"Response:\", response);\n        setUserInfo(response.data);\n      } catch (error) {\n        console.error(\"Error fetching user info:\", error);\n      }\n    };\n    fetchUserInfo();\n  }, []);\n\n  const handleGw2ApiKeyChange = (e) => {\n    setGw2ApiKey(e.target.value);\n  };\n\n  const fetchGw2AccountInfo = async () => {\n    try {\n      const url = `https://api.guildwars2.com/v2/account?access_token=${encodeURIComponent(\n        gw2ApiKey\n      )}`;\n      const response = await axios.get(url);\n      setGw2AccountInfo(response.data);\n\n      // Check if GW2 account name is already stored in the database\n      // If not, update it\n      if (!userInfo.gw2AccountName) {\n        await updateGw2AccountName(response.data.name);\n      }\n    } catch (error) {\n      console.error(\"Error fetching GW2 account info:\", error);\n    }\n  };\n\n  // Function to update GW2 account name in your database\n  const updateGw2AccountName = async (gw2AccountName) => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      await axios.post(\n        \"http://localhost:5500/update-gw2-account-name\",\n        { gw2AccountName },\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      console.log(\"GW2 account name updated successfully\");\n      // Optionally update the local state to reflect the saved GW2 account name\n    } catch (error) {\n      console.error(\"Error updating GW2 account name:\", error);\n    }\n  };\n\n  const [image, setImage] = useState(null);\n\n  const handleImageChange = (e) => {\n    if (e.target.files && e.target.files[0]) {\n      setImage(e.target.files[0]);\n    }\n  };\n\n  const handleSubmitImage = async () => {\n    const formData = new FormData();\n    formData.append(\"image\", image);\n\n    try {\n      const token = localStorage.getItem(\"token\");\n      await axios.post(\"http://localhost:5500/upload-image\", formData, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      });\n      console.log(\"Image uploaded successfully\");\n    } catch (error) {\n      console.error(\"Error uploading image:\", error);\n    }\n  };\n\n  require(\"dotenv\").config();\n  const multer = require(\"multer\");\n  const express = require(\"express\");\n  const mysql = require(\"mysql\");\n  const cors = require(\"cors\");\n  const bcrypt = require(\"bcrypt\");\n\n  const app = express();\n\n  // Middleware setup\n  app.use(cors());\n  app.use(express.json());\n\n  // Database connection\n  const db = mysql.createConnection({\n    host: \"localhost\",\n    user: \"root\",\n    password: \"root\",\n    database: \"lpeyramaure\",\n  });\n\n  db.connect((err) => {\n    if (err) {\n      console.error(\"Database connection error:\", err.stack);\n    } else {\n      console.log(\"Connected to the database.\");\n      // Initial DB query test\n      db.query(\"SELECT 1\", (err, results) => {\n        if (err) console.error(\"Initial DB query failed:\", err);\n        else console.log(\"Initial DB query succeeded:\", results);\n      });\n    }\n  });\n\n  // bcrypt test\n  async function testBcrypt() {\n    try {\n      const hash = await bcrypt.hash(\"test\", 10);\n      console.log(\"Hashed string:\", hash);\n    } catch (err) {\n      console.error(\"bcrypt error:\", err);\n    }\n  }\n  testBcrypt();\n\n  // Signup route\n  app.post(\"/signup\", async (req, res) => {\n    // Validate request data\n    if (!req.body.name || !req.body.email || !req.body.password) {\n      return res.status(400).json({ error: \"Missing required fields\" });\n    }\n\n    try {\n      // Hash the password\n      const hashedPassword = await bcrypt.hash(req.body.password, 10);\n\n      const sql = \"INSERT INTO login (name, email, password) VALUES (?)\";\n      const values = [req.body.name, req.body.email, hashedPassword];\n      db.query(sql, [values], (err, data) => {\n        if (err) {\n          console.error(\"Database query error:\", err);\n          return res.status(500).json({ error: err.message });\n        }\n        return res.status(201).json({ message: \"User created\" });\n      });\n    } catch (err) {\n      console.error(\"Error caught in /signup route:\", err);\n      return res.status(500).json({ error: err.message });\n    }\n  });\n\n  const jwt = require(\"jsonwebtoken\");\n\n  app.post(\"/login\", async (req, res) => {\n    const { email, password } = req.body;\n\n    // Fetch user from the database\n    const sql = \"SELECT * FROM login WHERE email = ?\";\n    db.query(sql, [email], async (err, results) => {\n      if (err) {\n        console.error(\"Database query error:\", err);\n        return res.status(500).json({ error: err.message });\n      }\n\n      if (results.length > 0) {\n        const user = results[0];\n        // Compare hashed password\n        if (await bcrypt.compare(password, user.password)) {\n          // Generate token\n          const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET, {\n            expiresIn: \"1h\",\n          });\n          return res.json({ token, name: user.name });\n        } else {\n          return res.status(401).json({ error: \"Invalid credentials\" });\n        }\n      } else {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n    });\n  });\n\n  function authenticateToken(req, res, next) {\n    const authHeader = req.headers[\"authorization\"];\n    const token = authHeader && authHeader.split(\" \")[1];\n\n    if (token == null) return res.sendStatus(401);\n\n    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\n      if (err) return res.sendStatus(403);\n      req.user = user;\n      next();\n    });\n  }\n\n  app.get(\"/user-info\", authenticateToken, (req, res) => {\n    const userId = req.user.userId;\n\n    const sql =\n      \"SELECT name, email, gw2_account_name, compteImage FROM login WHERE id = ?\";\n    db.query(sql, [userId], (err, results) => {\n      if (err) {\n        console.error(\"Database query error:\", err);\n        return res.status(500).json({ error: err.message });\n      }\n\n      if (results.length > 0) {\n        const userInfo = results[0];\n        return res.json({\n          name: userInfo.name,\n          email: userInfo.email,\n          gw2AccountName: userInfo.gw2_account_name, // Assuming you have this column in your DB\n          compteImage: userInfo.compteImage,\n        });\n      } else {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n    });\n  });\n\n  // Endpoint to update GW2 account name\n  app.post(\"/update-gw2-account-name\", authenticateToken, (req, res) => {\n    const userId = req.user.userId;\n    const { gw2AccountName } = req.body;\n\n    if (!gw2AccountName) {\n      return res.status(400).json({ error: \"GW2 account name is required\" });\n    }\n\n    const sql = \"UPDATE login SET gw2_account_name = ? WHERE id = ?\";\n    db.query(sql, [gw2AccountName, userId], (err, results) => {\n      if (err) {\n        console.error(\"Database query error:\", err);\n        return res\n          .status(500)\n          .json({ error: \"Failed to update GW2 account name\" });\n      }\n      if (results.affectedRows === 0) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      return res.json({ message: \"GW2 account name updated successfully\" });\n    });\n  });\n\n  const storage = multer.memoryStorage();\n  const upload = multer({ storage: storage });\n\n  // Endpoint pour télécharger une image de compte\n  app.post(\n    \"/upload-image\",\n    authenticateToken,\n    upload.single(\"image\"),\n    (req, res) => {\n      // Utilisation de 'userId' pour la cohérence avec l'endpoint '/user-info'\n      const userId = req.user.userId;\n      const imageBuffer = req.file.buffer; // Données binaires de l'image\n\n      // Mettre à jour la base de données avec les données binaires de l'image\n      const sql = \"UPDATE login SET compteImage = ? WHERE id = ?\";\n      db.query(sql, [imageBuffer, userId], (err, results) => {\n        if (err) {\n          console.error(\"Database query error:\", err);\n          return res.status(500).json({ error: \"Failed to update image data\" });\n        }\n        return res.json({\n          message: \"Image uploaded and data updated successfully\",\n        });\n      });\n    }\n  );\n\n  const [userImage, setUserImage] = useState(\"\");\n\n  useEffect(() => {\n    const fetchUserImage = async () => {\n      if (userInfo && userInfo.compteImage) {\n        try {\n          const base64Image = `data:image/jpeg;base64,${userInfo.compteImage}`;\n          console.log(\"Base64 Image:\", base64Image);\n          setUserImage(base64Image);\n        } catch (error) {\n          console.error(\"Error fetching image:\", error);\n        }\n      }\n    };\n\n    fetchUserImage();\n  }, [userInfo]);\n\n  // Start the server\n  app.listen(5500, () => {\n    console.log(\"Server is running on http://localhost:5500\");\n  });\n\n  return (\n    <div>\n      <h1>Page de compte</h1>\n      <p>\n        {userInfo.name}{\" \"}\n        {userInfo.gw2AccountName ||\n          (gw2AccountInfo && `/ ${gw2AccountInfo.name}`)}\n      </p>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Enter your GW2 API Key\"\n          value={gw2ApiKey}\n          onChange={handleGw2ApiKeyChange}\n        />\n        <button onClick={fetchGw2AccountInfo}>\n          Obtenir mon nom de compte joueur\n        </button>\n      </div>\n      <div>\n        <input type=\"file\" onChange={handleImageChange} />\n        {image && (\n          <img\n            src={URL.createObjectURL(image)}\n            alt=\"Account\"\n            style={{ borderRadius: \"50%\", height: \"100px\" }}\n          />\n        )}\n        <button onClick={handleSubmitImage}>Upload Image</button>\n      </div>\n      <div>{userImage && <img src={userImage} alt=\"User\" />}</div>\n    </div>\n  );\n}\n\nexport default Account;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}